{"version":3,"sources":["assets/image-icon.svg","assets/upload-icon.svg","assets/loader-icon.svg","components/Button/index.tsx","components/LazyImage/index.tsx","components/Round/index.tsx","components/Preview/index.tsx","components/Upload/index.tsx","components/Results/index.tsx","components/Loader/index.tsx","services/classifier-service.ts","services/photo-service.ts","hooks/useMonster/index.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Button","styled","button","props","variant","jello","keyframes","LazyImageElement","div","attrs","src","style","backgroundImage","animationDuration","Math","random","LazyImageWrapper","LazyImage","imageSource","setImageSource","useState","placeholder","ref","useRef","useEffect","observer","IntersectionObserver","entries","forEach","entry","intersectionRatio","isIntersecting","current","classList","add","rootMargin","threshold","observe","disconnect","animation","RoundWrapper","RoundTitle","h3","Round","title","children","PreviewImage","image","PreviewCancel","PreviewProceed","Preview","onProceed","onCancel","onClick","UploadContainer","label","uploadIcon","UploadInput","input","Upload","onChange","labelRef","addHover","removeHover","remove","addEventListener","removeEventListener","type","multiple","event","files","target","accept","ResultsBreed","h1","ResultsButton","ResultsList","Results","results","breed","onReset","map","result","key","LoaderIcon","loaderIcon","Loader","require","classifierService","model","Promise","async","resolve","reject","mobilenet","Image","className","classify","error","photosService","fetchResult","fetch","message","json","ok","Error","useMonster","monster","setMonster","step","reset","old","preview","undefined","searchPictures","photoService","setImage","file","URL","createObjectURL","Root","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.d08021b0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/image-icon.083e2d25.svg\";","module.exports = __webpack_public_path__ + \"static/media/upload-icon.4fd60528.svg\";","module.exports = __webpack_public_path__ + \"static/media/loader-icon.791f0d34.svg\";","import styled from 'styled-components';\n\nconst Button = styled.button`\n  background-color: var(--orange);\n  border: none;\n  border-radius: 50%;\n  color: var(--white);\n  cursor: pointer;\n  font-family: var(--fontSanSerif);\n  font-size: ${(props: ButtonProps) => {\n    switch (props.variant) {\n      case 'secondary':\n        return '13px';\n      default:\n        return '20px';\n    }\n  }};\n  height: ${(props: ButtonProps) => {\n    switch (props.variant) {\n      case 'secondary':\n        return '80px';\n      default:\n        return '120px';\n    }\n  }};\n  text-transform: uppercase;\n  width: ${(props: ButtonProps) => {\n    switch (props.variant) {\n      case 'secondary':\n        return '80px';\n      default:\n        return '120px';\n    }\n  }};\n  &:hover {\n    background-color: var(--darkBrown);\n  }\n`;\n\ninterface ButtonProps {\n  variant?: 'primary' | 'secondary';\n}\n\nexport default Button;\n","import React, { useEffect, useState, useRef } from 'react';\nimport styled, { keyframes } from 'styled-components';\n\nimport placeholder from '../../assets/image-icon.svg';\n\nconst jello = keyframes`\n  from {\n    transform: scale3d(1, 1, 1);\n  }\n\n  30% {\n    transform: scale3d(1.10, 0.75, 1);\n  }\n\n  40% {\n    transform: scale3d(0.75, 1.10, 1);\n  }\n\n  50% {\n    transform: scale3d(1.13, 0.85, 1);\n  }\n\n  65% {\n    transform: scale3d(0.95, 1.05, 1);\n  }\n\n  75% {\n    transform: scale3d(1.05, 0.95, 1);\n  }\n\n  to {\n    transform: scale3d(1, 1, 1);\n  }\n`;\n\ninterface LazyImageProps {\n  src: string;\n}\n\nconst LazyImageElement = styled.div.attrs<LazyImageProps>(({ src }) => ({\n  style: {\n    backgroundImage: `url(${src})`,\n    animationDuration: `${Math.random()}s`,\n  },\n}))<LazyImageProps>`\n  background-color: var(--white);\n  background-position: center;\n  background-size: cover;\n  padding-bottom: 100%;\n  width: 100%;\n\n  &.jello {\n    animation-name: ${jello};\n    transform-origin: center;\n  }\n`;\n\nconst LazyImageWrapper = styled.div`\n  border: 25px solid var(--darkBrown);\n  border-radius: 50%;\n  overflow: hidden;\n`\n\nconst LazyImage: React.FC<LazyImageProps> = ({ src }): JSX.Element => {\n  const [imageSource, setImageSource] = useState<string>(placeholder);\n  const ref = useRef<HTMLImageElement>(null);\n\n  useEffect(() => {\n    const observer = new IntersectionObserver(\n      (entries): void => {\n        entries.forEach((entry): void => {\n          if (entry.intersectionRatio > 0 || entry.isIntersecting) {\n            setImageSource(src);\n            ref.current?.classList.add('jello');\n          }\n        });\n      },\n      {\n        rootMargin: '70%',\n        threshold: 0.01,\n      },\n    );\n    observer.observe(ref.current!);\n\n    return function cleanup() {\n      observer.disconnect();\n    };\n  }, [src]);\n\n  return (\n    <LazyImageWrapper>\n      <LazyImageElement src={imageSource} ref={ref} />\n    </LazyImageWrapper>\n  )\n};\n\nexport default LazyImage;\n","import React from 'react';\nimport styled, { keyframes } from 'styled-components';\n\nconst animation = keyframes`\n\t0% {\n\t\tbox-shadow: 0 0 0 0 rgba(0, 0, 0, 0.7);\n\t\ttransform: translate(-50%, -50%) scale(0.85);\n\t}\n\t70% {\n\t\tbox-shadow: 0 0 0 10px rgba(0, 0, 0, 0);\n\t\ttransform: translate(-50%, -50%) scale(1);\n\t}\n\t100% {\n\t\tbox-shadow: 0 0 0 0 rgba(0, 0, 0, 0);\n\t\ttransform: translate(-50%, -50%) scale(0.85);\n  }\n`;\n\nconst RoundWrapper = styled.div`\n  animation: ${animation} 2s linear infinite;\n  background-color: var(--white);\n  border: 25px solid var(--darkBrown);\n  border-radius: 50%;\n  display: flex;\n  height: 250px;\n  left: 50%;\n  position: fixed;\n  top: 50%;\n  transform: translate(-50%, -50%);\n  width: 250px;\n`;\n\nconst RoundTitle = styled.h3`\n  transform: translate(0%, -120%);\n  white-space: pre-wrap;\n  text-align: center;\n  color: var(--orange);\n  font-size: 60px;\n  line-height: 1;\n  margin: 0;\n  padding: 0;\n  position: absolute;\n\n  @media only screen and (min-width: 768px) {\n    transform: translate(-50%, -50%) rotate(-25deg);\n    transform-origin: center;\n    top: 50%;\n    left: 50%;\n    white-space: nowrap;\n    \n    &::after {\n      background: var(--black);\n      content: '';\n      display: block;\n      height: 3px;\n      width: 100%;\n    }\n  }\n`;\n\ninterface RoundProps {\n  title?: string;\n}\n\nconst Round: React.FC<RoundProps> = ({ title, children }): JSX.Element => (\n  <RoundWrapper>\n    {title && <RoundTitle>{title}</RoundTitle>}\n    {children}\n  </RoundWrapper>\n);\n\nexport default Round;\n","import React from 'react';\n\nimport Round from '../Round';\nimport styled from 'styled-components';\nimport Button from '../Button';\n\nexport const PreviewImage = styled.div`\n  background-image: url(${({ image }: { image: string }) => image});\n  background-position: center;\n  background-repeat: no-repeat;\n  background-size: cover;\n  border-radius: 50%;\n  height: 100%;\n  width: 100%;\n`;\n\nexport const PreviewCancel = styled(Button)`\n  left: 0;\n  top: 100%;\n  position: absolute;\n  transform: translateY(-50%);\n\n  @media only screen and (min-width: 768px) {\n    left: -50%;\n    top: 50%;\n    transform: translate(-50%, -50%);\n  }\n`;\n\nexport const PreviewProceed = styled(Button)`\n  right: 0;\n  top: 100%;\n  position: absolute;\n  transform: translateY(-50%);\n\n  @media only screen and (min-width: 768px) {\n    right: -50%;\n    top: 50%;\n    transform: translate(50%, -50%);\n  }\n`;\n\ninterface PreviewProps {\n  src: string;\n  onCancel: () => void;\n  onProceed: () => void;\n}\n\nconst Preview: React.FC<PreviewProps> = ({\n  src,\n  onProceed,\n  onCancel,\n}): JSX.Element => (\n  <Round title=\"Do you want to proceed?\">\n    <PreviewCancel variant=\"secondary\" onClick={onCancel}>\n      Cancel\n    </PreviewCancel>\n    <PreviewImage image={src} />\n    <PreviewProceed onClick={onProceed}>Proceed</PreviewProceed>\n  </Round>\n);\n\nexport default Preview;\n","import React, { ChangeEvent, useEffect, useRef } from 'react';\nimport styled from 'styled-components';\n\nimport uploadIcon from '../../assets/upload-icon.svg';\nimport Round from '../Round';\n\nconst UploadContainer = styled.label`\n  background-image: url(${uploadIcon});\n  background-position: center;\n  background-size: 90%;\n  border: 3px dashed var(--brown);\n  border-radius: 50%;\n  margin: 10px;\n  overflow: hidden;\n  transition: border-color 0.2s;\n  width: 100%;\n\n  &:hover,\n  &.UploadContainer--hover {\n    border: 6px dashed var(--orange);\n  }\n`;\n\nconst UploadInput = styled.input`\n  bottom: 0;\n  cursor: pointer;\n  left: 0;\n  opacity: 0;\n  position: absolute;\n  top: 0;\n  width: 100%;\n`;\n\ninterface UploadProps {\n  onChange: (image: File) => unknown;\n}\n\nconst Upload: React.FC<UploadProps> = ({ onChange }): JSX.Element => {\n  const labelRef = useRef<HTMLLabelElement>(null);\n\n  const onFileChange = (event: ChangeEvent<HTMLInputElement>): void => {\n    const { files } = event.target;\n\n    if (files === null) return;\n\n    onChange(files[0]);\n  };\n\n  const addHover = (): void => {\n    labelRef.current?.classList.add('UploadContainer--hover');\n  };\n\n  const removeHover = (): void => {\n    labelRef.current?.classList.remove('UploadContainer--hover');\n  };\n\n  useEffect(() => {\n    const div = labelRef.current;\n\n    if (div === null) return;\n\n    div.addEventListener('dragenter', addHover);\n    div.addEventListener('dragleave', removeHover);\n    div.addEventListener('drop', removeHover);\n\n    return (): void => {\n      div.removeEventListener('dragenter', addHover);\n      div.removeEventListener('dragleave', removeHover);\n      div.removeEventListener('drop', removeHover);\n    };\n  });\n\n  return (\n    <Round title={'Drag & Drop an image!'}>\n      <UploadContainer ref={labelRef}>\n        <UploadInput\n          type=\"file\"\n          multiple={false}\n          onChange={onFileChange}\n          accept=\"image/*\"\n        />\n      </UploadContainer>\n    </Round>\n  );\n};\n\nexport default Upload;\n","import React from 'react';\nimport LazyImage from '../LazyImage';\nimport Button from '../Button';\nimport styled from 'styled-components';\n\ninterface ResultsProps {\n  onReset: () => unknown;\n  breed: string;\n  results: string[];\n}\n\nexport const ResultsBreed = styled.h1`\n  background: var(--white);\n  border-radius: 40px;\n  bottom: 30px;\n  display: inline-flex;\n  height: 60px;\n  line-height: 56px;\n  margin: 0;\n  padding: 0 41px;\n  position: fixed;\n  right: 30px;\n  z-index: 1;\n`;\n\nexport const ResultsButton = styled(Button)`\n  margin-left: 20px;\n  margin-right: -10px;\n  margin-top: -10px;\n`;\n\nexport const ResultsList = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  box-sizing: border-box;\n  justify-content: space-between;\n\n  & > * {\n    width: 41%;\n    margin-top: 4%;\n\n    @media only screen and (min-width: 768px) {\n      margin: 0;\n      box-sizing: border-box;\n      width: 22%;\n      margin-top: 4%;\n    }\n  }\n\n`;\n\n\nconst Results: React.FC<ResultsProps> = ({\n  results,\n  breed,\n  onReset,\n}): JSX.Element => {\n  return (\n    <div>\n      <ResultsBreed>\n        {breed}\n        <ResultsButton onClick={onReset} variant=\"secondary\">\n          cancel\n        </ResultsButton>\n      </ResultsBreed>\n      <ResultsList>\n        {results.map((result) => (\n          <LazyImage key={result} src={result} />\n        ))}\n      </ResultsList>\n    </div>\n  );\n};\n\nexport default Results;\n","import React from 'react';\n\nimport loaderIcon from '../../assets/loader-icon.svg';\nimport Round from '../Round';\nimport styled from 'styled-components';\n\nconst LoaderIcon = styled.div`\n  background-image: url(${loaderIcon});\n  background-position: center;\n  background-size: 90%;\n  height: 100%;\n  width: 100%;\n`;\n\nconst Loader: React.FC = (): JSX.Element => (\n  <Round title=\"Loading the puppies...\">\n    <LoaderIcon />\n  </Round>\n);\n\nexport default Loader;\n","import * as mobilenet from '@tensorflow-models/mobilenet';\nrequire('@tensorflow/tfjs');\n\nvar classifierService = (function () {\n  var model: mobilenet.MobileNet;\n\n  return (src: string) =>\n    new Promise<string>(async (resolve, reject) => {\n      if (!model) {\n        model = await mobilenet.load();\n      }\n\n      const image = new Image();\n\n      image.addEventListener(\n        'load',\n        async function () {\n          try {\n            const [{ className: breed }] = await model.classify(image);\n            resolve(breed);\n          } catch (error) {\n            reject(error);\n          }\n        },\n        false,\n      );\n\n      image.src = src;\n    });\n})();\n\nexport default classifierService;\n","const photosService = async (breed: string): Promise<string[]> => {\n  const fetchResult = await fetch(`https://dog.ceo/api/breed/${breed}/images`);\n  const { message } = await fetchResult.json();\n\n  if (!fetchResult.ok) {\n    throw new Error(message);\n  }\n\n  return message;\n};\n\nexport default photosService;\n","import { useState } from 'react';\nimport classifierService from '../../services/classifier-service';\nimport photoService from '../../services/photo-service';\n\ninterface State {\n  breed?: string;\n  error?: string;\n  preview?: string;\n  results?: string[];\n  step: 'loading' | 'upload' | 'preview' | 'result' | 'error';\n}\n\nexport interface UseMonster extends State {\n  reset: () => void;\n  searchPictures: () => void;\n  setImage: (file: File) => void;\n}\n\nconst useMonster = (): UseMonster => {\n  const [monster, setMonster] = useState<State>({\n    step: 'upload',\n  });\n\n  const searchPictures = async (): Promise<void> => {\n    let breed: string, results: string[], error: string;\n\n    setMonster(\n      (old: State): State => ({\n        ...old,\n        results: undefined,\n        breed: undefined,\n        step: 'loading',\n      }),\n    );\n\n    try {\n      breed = await classifierService(monster.preview!);\n      results = await photoService(breed);\n    } catch ({ message }) {\n      error = message;\n    }\n\n    setMonster(\n      (old: State): State => ({\n        ...old,\n        step: error ? 'error' : 'result',\n        results,\n        error,\n        breed,\n      }),\n    );\n  };\n\n  const setImage = (file: File): void =>\n    setMonster(\n      (old: State): State => ({\n        ...old,\n        preview: URL.createObjectURL(file),\n        step: 'preview',\n      }),\n    );\n\n  const reset = (): void =>\n    setMonster(\n      (old: State): State => ({\n        ...old,\n        preview: undefined,\n        step: 'upload',\n      }),\n    );\n\n  return {\n    ...monster,\n    reset,\n    searchPictures,\n    setImage,\n  };\n};\n\nexport default useMonster;\n","import React from 'react';\n\nimport { Preview, Round, Loader, Upload, Results } from './components';\nimport useMonster from './hooks/useMonster';\n\nconst Root: React.FC = (): JSX.Element => {\n  const {\n    step,\n    error,\n    preview,\n    results,\n    breed,\n    setImage,\n    searchPictures,\n    reset,\n  } = useMonster();\n  \n  switch (step) {\n    case 'error':\n      return <Round title={error} />;\n\n    case 'loading':\n      return <Loader />;\n\n    case 'upload':\n      return <Upload onChange={setImage} />;\n\n    case 'preview':\n      return (\n        <Preview src={preview!} onProceed={searchPictures} onCancel={reset} />\n      );\n\n    case 'result':\n      return <Results results={results!} breed={breed!} onReset={reset} />;\n  }\n};\n\nexport default Root;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}